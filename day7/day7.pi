import util.

main => go.

go => 
  go(read_file_lines(), R),
  println(R).

go(XS,N) =>
  Wires = new_map(),

  foreach(Line in XS)
    (Op,A,B,To) = parse_line(Line),
    Wires.put(To,(Op,A,B)),
  end,

  % Wires.put("b",(const,956,0)), % part 2
  N = solve_wire(Wires, "a").

solve_wire(Wires, X) = R =>
    N = parse_term(X),
    if(number(N)) then
      R = N,
    else
      (Op,A,B) = Wires.get(X),

      if(Op == const) then
        R = A,
      elseif(Op == op_and) then
        I = solve_wire(Wires,A),
        J = solve_wire(Wires,B),
        R = I /\ J,
      elseif(Op == op_or) then
        R = solve_wire(Wires,A) \/ solve_wire(Wires,B)
      elseif(Op == op_lshift) then
        R = (solve_wire(Wires,A) << B) /\ 65535
      elseif(Op == op_rshift) then
        I = solve_wire(Wires,A),
        R = I >> B,
      elseif(Op == op_not) then
        R = ~solve_wire(Wires,A) /\ 65535
      elseif(Op == op_ident) then
        R = solve_wire(Wires,A)
      end,
    end,
    Wires.put(X,(const,R,0)).

parse_line(S) = parse_chunks(split(S)).

parse_chunks([A,"AND",B,"->",To]) = (op_and,A,B,To).
parse_chunks([A,"OR",B,"->",To]) = (op_or,A,B,To).
parse_chunks([A,"LSHIFT",B,"->",To]) = (op_lshift,A,to_number(B),To).
parse_chunks([A,"RSHIFT",B,"->",To]) = (op_rshift,A,to_number(B),To).
parse_chunks(["NOT",A,"->",To]) = (op_not,A,0,To).
parse_chunks([A,"->",To]) = Z =>
  X = parse_term(A),
  Z = cond(number(X), (const,X,0,To),
                      (op_ident,A,0,To)).
parse_chunks(X) = error(bad_args,parse_chunks,X).
