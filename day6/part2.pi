import util.

main =>
  N = 1000,
  M = new_array(N,N),
  foreach(I in 1..N, J in 1..N)
    M[J,I] = 0,
  end,
  R = solve(read_file_lines(), M),
  println(R).

solve([], M) = count_on(M).
solve([X|XS], M) = R =>
  (Op,(I1,J1),(I2,J2)) = parse_line(X),

  foreach(I in I1..I2, J in J1..J2)
    M[J+1,I+1] := cond(Op == turn_on, 1 + M[J+1,I+1], cond(Op == turn_off, max(M[J+1,I+1]-1, 0), 2 + M[J+1,I+1])),
  end,
  R = solve(XS, M).

count_on(M) = C =>
  N = M.length(),
  C = 0,
  foreach(I in 1..N, J in 1..N)
    C := C + M[J,I]
  end.

% Parse input
parse_line(S) = parse_chunks(split(S)).

parse_chunks(["turn","on",From,_,To]) = make_op(turn_on, From, To).
parse_chunks(["turn","off",From,_,To]) = make_op(turn_off, From, To).
parse_chunks(["toggle",From,_,To]) = make_op(toggle, From, To).

parse_coord(S) = R =>
  [X,Y] = split(S,","),
  R = (to_number(X), to_number(Y)).

make_op(Op,From,To) = R =>
  F = parse_coord(From),
  T = parse_coord(To),
  R = (Op, F, T).
