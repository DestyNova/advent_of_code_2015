import util.

main =>
  Weapons = {
    {8, 4, 0},
    {10, 5, 0},
    {25, 6, 0},
    {40, 7, 0},
    {74, 8, 0}
  },

  Armour = {
    {0, 0, 0},
    {13, 0, 1},
    {31, 0, 2},
    {53, 0, 3},
    {75, 0, 4},
    {102, 0, 5}
  },

  Rings = [
    {0, 0, 0},
    {0, 0, 0},
    {25, 1, 0},
    {50, 2, 0},
    {100, 3, 0},
    {20, 0, 1},
    {40, 0, 2},
    {80, 0, 3}
  ],

  [Enemy_hp, Enemy_dmg, Enemy_armour] = [S.parse_term : L in read_file_lines(), [_,S] = L.split(":")],
  println(hp=Enemy_hp),
  Max_cost = minint_small(),

  foreach (W in Weapons)
    foreach (A in Armour)
      Ring_pairs = [[P,Q] : I in 1..len(Rings)-1, P = Rings[I], Q in Rings.drop(I)],
      foreach ([R1,R2] in Ring_pairs)
        Cost   = W[1] + A[1] + R1[1] + R2[1],
        Damage = W[2] + A[2] + R1[2] + R2[2],
        Def = W[3] + A[3] + R1[3] + R2[3],

        Net_incoming_damage = max(1, Enemy_dmg - Def),
        Net_outgoing_damage = max(1, Damage - Enemy_armour),

        Turns_till_loss = ceiling(100 / Net_incoming_damage),
        Turns_till_win = ceiling(Enemy_hp / Net_outgoing_damage),

        if Turns_till_win > Turns_till_loss && Cost > Max_cost then
          Max_cost := Cost
        end,
      end,
    end,
  end,

  println(min=Max_cost),
  println(ok).
