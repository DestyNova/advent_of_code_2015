import planner.
import util.

main =>
  [S0,_|Rules] = read_file_lines().reverse(),
  Replacements = parse_input(Rules, new_map()),
  println(Replacements),
 
  get_global_map(g1).put(replacements,Replacements),
  println(s0=S0.length),
  % S1 = expand(S0, Replacements), % sloooow
  % println(s1=S1.map(length).min),
  % greedy backtracking: runs out of memory after 19 mins, stuck about 180-200 steps in
  % greedy(S0,0,Replacements,Steps),
  % println(steps=Steps),
  plan(S0,Plan,Cost),  % works with fudged (bad) heuristic function, otherwise takes ages then runs out of memory
  writeln(Plan),
  writeln(Cost).

% report(X) => println(report=X).

greedy_no_bt("e",Steps,_,T) =>
  printf("Solution found with %d steps.\n", Steps),
  T=Steps.

greedy_no_bt(S,Steps,Replacements,T) =>
  printf("########\nSteps: %d, s: %s, len: %d\n", Steps, S, S.len),
  Expanded = expand(S, Replacements).sort,
  N = Expanded.length,
  if(N > 1) then
    Candidates = [(Candidate.length,Candidate) : Candidate in Expanded, Candidate != S].sort,
    println(candidates=Candidates),
    [S2|_] = [C : (_,C) in Candidates],
    % S2 = Candidates.first,
    % printf("Steps: %d, n: %d\n", Steps, N),
    % println(s1=Expanded),
    % println(s2=S2),
    greedy_no_bt(S2,Steps+1,Replacements,T),
  else
    println(wat=Expanded),
    false
  end.

table
greedy("e",Steps,_,T) =>
  printf("Solution found with %d steps.\n", Steps),
  T=Steps.
greedy(S,Steps,Replacements,T) ?=>
  printf("########\nSteps: %d, s: %s\n", Steps, S),
  Expanded = expand(S, Replacements).sort,
  N = Expanded.length,
  Steps < 360,
  % (S.length / (128 - Steps)) < 10,
  (S == "" || N >= 1),
  if(N > 1) then
    Candidates = [C : (_,C) in [(Candidate.length,Candidate) : Candidate in Expanded, Candidate != S].sort],
    member(S2,Candidates),
    % printf("Steps: %d, n: %d\n", Steps, N),
    % println(s1=Expanded),
    % println(s2=S2),
    greedy(S2,Steps+1,Replacements,T),
  else
    false
  end.

final(S) =>
  printf("%d: %s\n\n", S.length, S),
  S == "e".

action(S, S1, Action, Cost) ?=>
  Replacements = get_global_map(g1).get(replacements),
  Expanded = expand(S, Replacements).delete(S),
  member(Action, 1..Expanded.length),
  S1 = Expanded[Action],
  (S1 == "e" || length([1 : C in S1, C == 'e']) == 0),
  Cost = 1.

% absolutely definitely inadmissible heuristic. 9 or 10 would seem "correct" but search never terminates.
heuristic(S) = R => R = S.length / 2.5.

table
expand("", Replacements) = [""].
expand(S, Replacements) = R =>
  Acc = new_set(),
  foreach(K in Replacements)
    Prefix = K[1],
    Options = K[2],
    L = length(Prefix),

    if(S.take(L) == Prefix) then
      Dropped = S.drop(L),
      foreach(Replacement in Options)
        foreach(R in [Replacement ++ Dropped])
          Acc.put(R)
        end,
        % Acc := Acc ++ [Replacement ++ Dropped],
      end,
    else
      % Acc := Acc ++ [[S.first|X] : X in expand(S.tail, Replacements)],
      foreach(P in [[S.first|X] : X in expand(S.tail, Replacements)])
        Acc.put(P)
      end,
    end,
  end,
  R = Acc.keys.

parse_input([], M) = M.
parse_input([S|Rest], M) = R =>
  [Dest,_,Source] = split(S),
  Dests = M.get(Source, []),
  M.put(Source, [cond(Dest == "e", "e", Dest) | Dests]),
  R = parse_input(Rest, M).
