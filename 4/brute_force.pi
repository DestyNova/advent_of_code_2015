% Advent of Code 2015 day 4: find the lowest positive integer N such that md5(S ++ to_string(N)) starts with:
% 00000 (part 1), 000000 (part 2)

import util.

main =>
  R = solve(read_line()),
  println(R).

solve(S) = X =>
  foreach(I in 1..99999999)
    X = md5(S ++ to_string(I)),
    if("00000" == take(X, 5)) then % part 1
    % if("000000" == take(X, 6)) then % part 2
      println(match=I),
      exit()
    elseif I mod 10000 == 0 then
      garbage_collect(),
      println(I)
    end.

md5(S) = X =>
  % Adapted from pseudocode here: https://en.wikipedia.org/wiki/MD5#Algorithm
  % Shift table
  Shifts = [7, 12, 17, 22,  7, 12, 17, 22,  7, 12, 17, 22,  7, 12, 17, 22,
            5,  9, 14, 20,  5,  9, 14, 20,  5,  9, 14, 20,  5,  9, 14, 20,
            4, 11, 16, 23,  4, 11, 16, 23,  4, 11, 16, 23,  4, 11, 16, 23,
            6, 10, 15, 21,  6, 10, 15, 21,  6, 10, 15, 21,  6, 10, 15, 21],
  % Sine table
  K = [0xd76aa478, 0xe8c7b756, 0x242070db, 0xc1bdceee,
      0xf57c0faf, 0x4787c62a, 0xa8304613, 0xfd469501,
      0x698098d8, 0x8b44f7af, 0xffff5bb1, 0x895cd7be,
      0x6b901122, 0xfd987193, 0xa679438e, 0x49b40821,
      0xf61e2562, 0xc040b340, 0x265e5a51, 0xe9b6c7aa,
      0xd62f105d, 0x02441453, 0xd8a1e681, 0xe7d3fbc8,
      0x21e1cde6, 0xc33707d6, 0xf4d50d87, 0x455a14ed,
      0xa9e3e905, 0xfcefa3f8, 0x676f02d9, 0x8d2a4c8a,
      0xfffa3942, 0x8771f681, 0x6d9d6122, 0xfde5380c,
      0xa4beea44, 0x4bdecfa9, 0xf6bb4b60, 0xbebfbc70,
      0x289b7ec6, 0xeaa127fa, 0xd4ef3085, 0x04881d05,
      0xd9d4d039, 0xe6db99e5, 0x1fa27cf8, 0xc4ac5665,
      0xf4292244, 0x432aff97, 0xab9423a7, 0xfc93a039,
      0x655b59c3, 0x8f0ccc92, 0xffeff47d, 0x85845dd1,
      0x6fa87e4f, 0xfe2ce6e0, 0xa3014314, 0x4e0811a1,
      0xf7537e82, 0xbd3af235, 0x2ad7d2bb, 0xeb86d391],

  A0 = 0x67452301,
  B0 = 0xefcdab89,
  C0 = 0x98badcfe,
  D0 = 0x10325476,

  % pad the message
  S2 = S ++ [chr(0x80)],
  S2_len = length(S2),
  S3 = S2 ++ [chr(0) : _ in 1..(56 - S2_len)],

  % append original message _BIT_ length in 64-bit little-endian binary
  Binary_len = int_to_bin32(length(S)*8) ++ [chr(0) : _ in 0..3],
  S4 = S3 ++ Binary_len,

  % process in 512-bit chunks, but we only have one
  M = [bin_to_int(T) : T in chunks_of(S4, 4)],

  A = A0,
  B = B0,
  C = C0,
  D = D0,

  foreach(I in 0..63)
    (F,G) = cond(I <= 15, ((B /\ C) \/ ((~B) /\ D), I),
              cond(I <= 31, ((D /\ B) \/ ((~D) /\ C), (5*I + 1) mod 16),
                cond(I <= 47, (B ^ C ^ D, (3*I + 5) mod 16),
                              (C ^ (B \/ (~D)), (7*I) mod 16)))),


    F := (F + A + K[I+1] + M[G+1]) /\ 0xffffffff,
    A := D,
    D := C,
    C := B,
    Sw = Shifts[I+1],
    B := (B + ((F << Sw) \/ (F >> (32-Sw)))) /\ 0xffffffff,
  end,

  A1 = (A0 + A) /\ 0xffffffff,
  B1 = (B0 + B) /\ 0xffffffff,
  C1 = (C0 + C) /\ 0xffffffff,
  D1 = (D0 + D) /\ 0xffffffff,

  R = [],
  foreach(Acc in [A1,B1,C1,D1])
    foreach(I in 0..3)
      R := R ++ (to_fstring("%02x", (Acc >> (I*8)) /\ 0xff))
    end,
  end,
  X = R.

bin_to_int([C1,C2,C3,C4]) = ord(C4)*(256**3) + ord(C3)*(256**2) + ord(C2)*(256**1) + ord(C1).
int_to_bin32(X) = [chr((X >> S) /\ 0xff) : S in [0,8,16,24]]
